#!/bin/bash
# srm-kernel - Standard refinement modules
#
# Copyright (c) 2013-2015 FOXEL SA - http://foxel.ch
# Please read <http://foxel.ch/license> for more information.
#
#
# Author(s):
#
#       Nils Hamel <n.hamel@foxel.ch>
#
# Contributor(s):
#
#       Kevin Velickovic <k.velickovic@foxel.ch>
#
#
# This file is part of the FOXEL project <http://foxel.ch>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Additional Terms:
#
#       You are required to preserve legal notices and author attributions in
#       that material or in the Appropriate Legal Notices displayed by works
#       containing it.
#
#       You are required to attribute the work as explained in the "Usage and
#       Attribution" section of <http://foxel.ch/license>.

    # Storage variables #
    SRM_MNT_BASE="/data/"

    # Command variables #
    SRM_CMD_NORM="$(basename $0)"
    SRM_CMD_HASH="$(basename $0)"

    # Execution variables #
    SRM_MOD_EXEC="default"
    SRM_MOD_FORC="false"
    SRM_MOD_MODE="unknown"
    SRM_MOD_OMGM="unknown"
    SRM_MOD_DENS="unknown"
    SRM_MOD_MMSR=""
    SRM_MOD_IHAS=""
    SRM_MOD_OHAS=""
    SRM_MOD_AHAS=""

    # Parallel variables #
    SRM_PLL_POSE=""
    SRM_PLL_CONF="1"

    # Signal variables #
    SRM_SIG_EXIT=0

    # Classification variables #
    SRM_IO_ICLASS="rectile"
    SRM_IO_OCLASS="cloud"

# Argument and parameter
#
# This function reads the module script arguments and parameters using the
# assuption that every argument always comes with a unique parameter. Moreover
# this function creates a normalized and a simplified representation of the
# script command.
#
# The simplified representation of the command considers only parameters that
# are specified using a simple '-' switch (e.g. '-a 1.0'). This simplified
# command is then used to compute the module hash sum according to the standard
# storage structure requirement.
#
# A consequence of the standard storage structure and the way module hash are
# computed is that arguments considered in the simplified representation of the
# command cannot come with default values.

    function srm_arg() {

        # Arguments and parameters #
        while [[ $# > 0 ]]; do

            # Read token and update head #
            srm_arg="$1"; shift
            srm_prm="$1"; shift

            # Switch on arguments #
            case $srm_arg in

                --mount-point)
                    SRM_MNT_BASE="$srm_prm"
                ;;
                --address)
                    SRM_MOD_MMSR="$srm_prm"
                ;;
                --display)
                    SRM_MOD_EXEC="$srm_prm"
                ;;
                --thread)
                    SRM_PLL_CONF="$srm_prm"
                ;;
                --force)
                    SRM_MOD_FORC="$srm_prm"
                ;;
                -n)
                    SRM_MOD_IHAS="$srm_prm"
                ;;
                -m)
                    SRM_MOD_MODE="$srm_prm"
                ;;
                -o)
                    SRM_MOD_OMGM="$srm_prm"
                ;;
                -d)
                    SRM_MOD_DENS="$srm_prm"
                ;;

            esac

            # Compose normalized command #
            SRM_CMD_NORM="$SRM_CMD_NORM $srm_arg $srm_prm"

            # Filter arguments and parameters #
            if [ "${srm_arg:1:1}" != "-" ]; then 

                # Compose simplified command #
                srm_insert $srm_arg $srm_prm

            fi

        done

    }

# Argument and parameter sorting
#
# This function is used to set the simplified command that is used to compute
# the module hash sum. Taking into account that the order of the provided
# arguments and parameters is transparent to hash computation, this function
# sorts the arguments and parameters on the basis of the arguments.

    function srm_insert() {

        # Create token array #
        SRM_INS_PART=($SRM_CMD_HASH)

        # Reset simplified command #
        SRM_CMD_HASH="${SRM_INS_PART[0]}"

        # Detects empty command #
        if (( ${#SRM_INS_PART[@]} == 1 )); then

            # Insert arguments and parameters #
            SRM_CMD_HASH="$SRM_CMD_HASH $1 $2"

        else

            # Ordered insertion of arguments and parameters #
            SRM_INS_FLAG=0; for (( i = 1; i < ${#SRM_INS_PART[@]}; i = i + 2 )); do

                # Arguments and parameter sorting #
                if (( $( printf "%d" "'${SRM_INS_PART[$i]:1:1}" ) > $( printf "%d" "'${1:1:1}" ) )) && (( $SRM_INS_FLAG == 0 )); then

                    # Insert arguments and parameters and update insertion flag #
                    SRM_CMD_HASH="$SRM_CMD_HASH $1 $2 ${SRM_INS_PART[$i]} ${SRM_INS_PART[$((i+1))]}"; SRM_INS_FLAG=1

                else

                    # Check insertion ending #
                    if (( $i + 2 == ${#SRM_INS_PART[@]} )) && (( $SRM_INS_FLAG == 0 )); then

                        # Insert arguments and parameters #
                        SRM_CMD_HASH="$SRM_CMD_HASH ${SRM_INS_PART[$i]} ${SRM_INS_PART[$((i+1))]} $1 $2"

                    else

                        # Insert arguments and parameters #
                        SRM_CMD_HASH="$SRM_CMD_HASH ${SRM_INS_PART[$i]} ${SRM_INS_PART[$((i+1))]}"

                    fi

                fi

            done

        fi

    }

# Message display
#
# The following function simply displays the string provdided as parameter using
# the standard error as output.

    function srm_echo() {

        # Display message #
        >&2 echo "$1"
        
    }

# Timestamps selection
#
# This function detects if a given timestamps, provided by the considered pose,
# is in the range of the provided mmsr address. In order to perform this check,
# the function waits the pose timestamps and the two downer and upper timestamps
# of the considered mmsr address to provide an answer.

    function srm_selected() {

        # Decompose timestamps in second and micro-seconds #
        SRM_TS_PART=(${1//_/ })
        SRM_ML_PART=(${2//_/ })
        SRM_MH_PART=(${3//_/ })
        SRM_TS_UNIX=$((10#${SRM_TS_PART[0]}))
        SRM_TS_USEC=$((10#${SRM_TS_PART[1]}))
        SRM_ML_UNIX=$((10#${SRM_ML_PART[0]}))
        SRM_MH_UNIX=$((10#${SRM_MH_PART[0]}))
        SRM_ML_USEC=$((10#${SRM_ML_PART[1]}))
        SRM_MH_USEC=$((10#${SRM_MH_PART[1]}))

        # Check downer boundary - seconds #
        if (( $SRM_TS_UNIX < $SRM_ML_UNIX )); then

            # Update result #
            SRM_RETURN=0

        else

            # Check downer boundary - seconds #
            if (( $SRM_TS_UNIX == $SRM_ML_UNIX )); then

                # Check downer boundary - micro-seconds #
                if (( $SRM_TS_USEC < $SRM_ML_USEC )); then

                    # Update result #
                    SRM_RETURN=0

                else

                    # Update result #
                    SRM_RETURN=1

                fi

            else

                # Update result #
                SRM_RETURN=1

            fi

        fi

        # Check intermediates result #
        if (( $SRM_RETURN == 1 )); then

            # Check upper boundary - seconds #
            if (( $SRM_TS_UNIX > $SRM_MH_UNIX )); then

                # Update result #
                SRM_RETURN=0

            else

                # Check upper boundary - seconds #
                if (( $SRM_TS_UNIX == $SRM_MH_UNIX )); then

                    # Check decimale boundary - micro-seconds #
                    if (( $SRM_TS_USEC > $SRM_MH_USEC )); then

                        # Update result #
                        SRM_RETURN=0

                    else

                        # Update result #
                        SRM_RETURN=1

                    fi

                else

                    # Update result #
                    SRM_RETURN=1

                fi

            fi

        fi

        # Return result #
        echo $SRM_RETURN

    }

# Node initialization #
#
# This function initialize the module node directories and files structure and
# creates the information files. When the structure is already initialized, the
# function only complete required information.

    function srm_init() {

        # Create command informations #
        SRM_NOD_INFO="$(date +"%d.%m.%Y@%T(%z)") $USER@$HOSTNAME \$ $SRM_CMD_NORM"

        # Create/update node directories #
        mkdir -p $SRM_MNT_BASE/cluster/$SRM_MOD_OHAS
        mkdir -p $SRM_MNT_BASE/cluster/$SRM_MOD_OHAS/info
        mkdir -p $SRM_MNT_BASE/cluster/$SRM_MOD_OHAS/data

        # Create/update node information #
        echo $SRM_IO_OCLASS > $SRM_MNT_BASE/cluster/$SRM_MOD_OHAS/info/class-output
        echo $SRM_IO_ICLASS > $SRM_MNT_BASE/cluster/$SRM_MOD_OHAS/info/class-input
        echo $SRM_MOD_OHAS  > $SRM_MNT_BASE/cluster/$SRM_MOD_OHAS/info/hash-output
        echo $SRM_MOD_IHAS  > $SRM_MNT_BASE/cluster/$SRM_MOD_OHAS/info/hash-input
        echo $SRM_CMD_HASH  > $SRM_MNT_BASE/cluster/$SRM_MOD_OHAS/info/command-hash

        # Update node command history #
        echo "$SRM_NOD_INFO" >> $SRM_MNT_BASE/cluster/$SRM_MOD_OHAS/info/command-history

    }

# Timestamps hashing
#
# This function returns the hashed (truncated) timestamps value for any given
# timestamp according to the storage structure standards. It corresponds to a
# simple division by ten.

    function srm_tshash() {

        # Retrieve unix timestamps #
        SRM_TS_UNIX=(${1//_/ })

        # Returns hashed timestamps #
        echo $(( ${SRM_TS_UNIX[0]} / 100 ))

    }

# Temporary file system
#
# This function creates a temporary storage (tmpfs) in case module requires
# fast-access storage. It also allows to delete the temporary storage as the
# module ends its task.

    function srm_tmpfs() {

        # Create temporary storage path #
        SRM_TMP_NAME=/run/shm/$(echo "$SRM_IO_PATH" | sha256sum | cut -c 1-32)

        # Temporary storage management #
        if [ "$1" == "create" ]; then

            # Create temporary storage #
            mkdir -p $SRM_TMP_NAME

        elif [ "$1" == "delete" ]; then

            # Check temporary storage #
            if [ -d $SRM_TMP_NAME ]; then

                # Delete temporary storage #
                rm -rf $SRM_TMP_NAME

            fi

        fi

    }

# Calibration data access
#
# This function allows to query calibration data through the standard storage
# structure. It expects the device MAC address and the key of the desired value
# and returns it when the key is found in the calibration data. An empty string
# is return otherwise.

    function srm_askc() {

        # Reads and returns value of key #
        echo $(grep "$2" $SRM_MNT_BASE/camera/$1/fastcal/calibration.key | cut -d'=' -f2)

    }

# Single device verification
#
# This function parses the poses array computed by the module and determines if
# every poses stored in the array come from the same capture device. If all
# poses come from the same device, the function answer 1, 0 otherwise.

    function srm_singledev() {

        # Initialize verification #
        SRM_SDV_MACA=""

        # Parsing pose array #
        for SRM_SDV_POSE in $1; do

            # Decompose pose array #
            SRM_SDV_PART=(${SRM_SDV_POSE//,/ })

            # Check initial state #
            if [ -z "$SRM_SDV_MACA" ]; then

                # Store MAC address #
                SRM_SDV_MACA="${SRM_SDV_PART[2]}"

            else

                # Single device verification #
                if [ "${SRM_SDV_PART[2]}" != "$SRM_SDV_MACA" ]; then

                    # Invalidate MAC address #
                    SRM_SDV_MACA="null"

                fi

            fi

        done

        # Verification results #
        if [ "$SRM_SDV_MACA" == "null"; then

            # Verification failed #
            echo 0

        else

            # Verification succeed #
            echo 1

        fi      

    }

# Module specific function (visual-odometry@openmvg)
#
# This function is responsible of visual odometry extraction based on the images
# provided by digitisation devise. According to the execution mode, it also
# selects the sensors of the device that are used for the the odometry extract.
# The openMVG software is used to extract the visual odometry through this
# function.
#
# In addition to this function, a specific function is also provided to compose
# the pair list file, containing the images comparison rules, according to the
# visual odometry extraction mode.

    function srm_openmvg() {

        # Local thread configuration #
        export OMP_NUM_THREADS=$(($SRM_PLL_CONF))

        # Initialize structure #
        mkdir -p $SRM_EXE_OPOS/cluster/images
        mkdir -p $SRM_EXE_OPOS/cluster/matches
        mkdir -p $SRM_EXE_OPOS/cluster/omvg

        # Initialize options #
        SRM_MVG_CHAN=""

        # Check openmvg mode #
        if [ "$SRM_MOD_OMGM" == "front" ]; then

            # Create model #
            SRM_MVG_CHAN="08.tiff"

        elif [ "$SRM_MOD_OMGM" == "back" ]; then

            # Create model #
            SRM_MVG_CHAN="12.tiff"

        elif [ "$SRM_MOD_OMGM" == "crown" ]; then

            # Create model #
            SRM_MVG_CHAN="08.tiff 09.tiff 10.tiff 11.tiff 12.tiff 13.tiff 14.tiff 15.tiff"

        elif [ "$SRM_MOD_OMGM" == "sp1024" ]; then

            # Create model #
            SRM_MVG_CHAN="10.tiff 24.tiff"

        elif [ "$SRM_MOD_OMGM" == "sp1425" ]; then

            # Create model #
            SRM_MVG_CHAN="14.tiff 25.tiff"

        fi

        # Image sampling #
        for SRM_MVG_SRC in $(ls -v $SRM_EXE_OPOS/source/*.tiff); do

            # Extract file basename #
            SRM_MVG_NAME=$(basename $SRM_MVG_SRC)

            # Parsing model #
            for SMR_MVG_CHN in $SRM_MVG_CHAN; do

                # Image channel filtering #
                if [[ "$SRM_MVG_NAME" == *"$SMR_MVG_CHN"* ]]; then

                    # Create symbolic link #
                    ln -sf $SRM_MVG_SRC $SRM_EXE_OPOS/cluster/images/

                fi

            done

        done

        # Create pair list file #
        srm_openmvg_pairs

        # Going to cluster directory #
        SRM_EXE_XPAT=$(pwd); cd $SRM_EXE_OPOS/cluster/

        # Initialize openmvg json-file #
        openMVG_main_SfMInit_ImageListing -i ./images -o ./ -f 2048 #&> /dev/null

        # Computing features #
        openMVG_main_ComputeFeatures -i ./sfm_data.json -o ./matches #&> /dev/null

        # Computing matches #
        openMVG_main_ComputeMatches -i ./sfm_data.json -o ./matches -l ./pairlist.txt -g e #&> /dev/null

        # Computing global method for visual odometry #
        openMVG_main_GlobalSfM -i ./sfm_data.json -m ./matches -o ./omvg #&> /dev/null

        # Return to call directory #
        cd $SRM_EXE_XPAT

    }

    function srm_openmvgrig() {

        # Local thread configuration #
        export OMP_NUM_THREADS=$(($SRM_PLL_CONF))

        # Initialize structure #
        mkdir -p $SRM_EXE_OPOS/cluster/images
        mkdir -p $SRM_EXE_OPOS/cluster/matches
        mkdir -p $SRM_EXE_OPOS/cluster/omvg

        # Initialize options #
        SRM_MVG_CHAN=""
        SRM_MVG_DRIG=""

        # Check openmvg mode #
        if [ "$SRM_MOD_OMGM" == "crown" ]; then

            # Create model #
            SRM_MVG_CHAN="08.tiff 09.tiff 10.tiff 11.tiff 12.tiff 13.tiff 14.tiff 15.tiff"

            # Create rig structure #
            SRM_MVG_DRIG="8\n9\n10\n11\n12\n13\n14\n15"

        elif [ "SRM_MOD_OMGM" == "sp1024" ]; then

            # Create model #
            SRM_MVG_CHAN="10.tiff 24.tiff"

            # Create rig structure #
            SRM_MVG_DRIG="10\n24"

        elif [ "SRM_MOD_OMGM" == "sp1425" ]; then

            # Create model #
            SRM_MVG_CHAN="14.tiff 25.tiff"

            # Create rig structure #
            SRM_MVG_DRIG="14\n25"

        fi

        # Image sampling #
        for SRM_MVG_SRC in $(ls -v $SRM_EXE_OPOS/source/*.tiff); do

            # Extract file basename #
            SRM_MVG_NAME=$(basename $SRM_MVG_SRC)

            # Parsing model #
            for SMR_MVG_CHN in $SRM_MVG_CHAN; do

                # Image channel filtering #
                if [[ "$SRM_MVG_NAME" == *"$SMR_MVG_CHN"* ]]; then

                    # Create symbolic link #
                    ln -sf $SRM_MVG_SRC $SRM_EXE_OPOS/cluster/images/

                fi

            done

        done

        # Going to cluster directory #
        SRM_EXE_XPAT=$(pwd); cd $SRM_EXE_OPOS/cluster/

        # Create channel file #
        echo -e "$SRM_MVG_DRIG" > ./channel.txt

        # Create pair list file #
        srm_openmvg_pairs

        # Initialize openmvg json-file #
        openMVGRig_SfMInit_ImageListing2 -i ./images -o ./ -m $1 -d $SRM_MNT_BASE -c ./channel.txt #&> /dev/null

        # Computing features #
        openMVG_main_ComputeFeatures -i ./sfm_data.json -o ./matches #&> /dev/null

        # Computing matches #
        openMVG_main_ComputeMatches -i ./sfm_data.json -o ./matches -l ./pairlist.txt -g e #&> /dev/null

        # Computing global method for visual odometry #
        openMVGRig_GlobalSfM -i ./sfm_data.json -m ./matches -o ./omvg -f 0 #&> /dev/null

        # Return to call directory #
        cd $SRM_EXE_XPAT
        

    }

    function srm_openmvg_pairs() {

        # Retrieve number of selected file #
        SRM_MVG_FILE=$(ls -1 $SRM_EXE_OPOS/cluster/images/ | wc -l)

        # Check openmvg mode #
        if [ "$SRM_MOD_OMGM" == "front" ] || [ "$SRM_MOD_OMGM" == "back" ]; then

            # Compute number of poses #
            SRM_MVG_FILE=$(( $SRM_MVG_FILE / 1 ))

            # Compose pair structure #
            for SRM_MVG_MAIN in $(seq 0 $(( $SRM_MVG_FILE - 1 ))); do

                # Initialize pair line #
                SRM_MVG_PAIR="$SRM_MVG_MAIN"
                SRM_MVG_ADDE=0

                # Compose pair structure #
                for SRM_MVG_SCDE in $(seq 1 10); do

                    # Compute pair index #
                    SRM_MVG_TEST=$(( $SRM_MVG_MAIN + $SRM_MVG_SCDE ))

                    # Appending pair index #
                    if (( $SRM_MVG_TEST < $SRM_MVG_FILE )); then SRM_MVG_PAIR="$SRM_MVG_PAIR $SRM_MVG_TEST"; SRM_MVG_ADDE=$(( $SRM_MVG_ADDE + 1 )); fi

                done

                # Export pair line #
                if (( $SRM_MVG_ADDE > 0 )); then echo $SRM_MVG_PAIR >> $SRM_EXE_OPOS/cluster/pairlist.txt; fi

            done

        elif [ "$SRM_MOD_OMGM" == "sp1024" ] || [ "$SRM_MOD_OMGM" == "sp1425" ]; then

            # Compute number of poses #
            SRM_MVG_FILE=$(( $SRM_MVG_FILE / 1 ))

            # Compose pair structure #
            for SRM_MVG_MAIN in $(seq 0 $(( $SRM_MVG_FILE - 1 ))); do

                # Initialize pair line #
                SRM_MVG_PAIR="$SRM_MVG_MAIN"
                SRM_MVG_ADDE=0

                # Compose pair structure #
                for SRM_MVG_SCDE in $(seq 1 10); do

                    # Compute pair index #
                    SRM_MVG_TEST=$(( $SRM_MVG_MAIN + $SRM_MVG_SCDE ))

                    # Appending pair index #
                    if (( $SRM_MVG_TEST < $SRM_MVG_FILE )); then SRM_MVG_PAIR="$SRM_MVG_PAIR $SRM_MVG_TEST"; SRM_MVG_ADDE=$(( $SRM_MVG_ADDE + 1 )); fi

                done

                # Export pair line #
                if (( $SRM_MVG_ADDE > 0 )); then echo $SRM_MVG_PAIR >> $SRM_EXE_OPOS/cluster/pairlist.txt; fi

            done

        elif [ "$SRM_MOD_OMGM" == "crown" ]; then

            # Setting assembly sensor count #
            SRM_MOD_ASCT=8

            # Compute number of poses #
            SRM_MVG_FILE=$(( $SRM_MVG_FILE / $SRM_MOD_ASCT ))

            # Compose pair structure #
            for SRM_MVG_MAIN in $(seq 0 $(( $SRM_MVG_FILE - 1 ))); do

                # Parsing crown #
                for SRM_MVG_CROW in $(seq 0 $(($SRM_MOD_ASCT-1)) ); do

                    # Initialize pair line #
                    SRM_MVG_PAIR=$(( ( $SRM_MVG_MAIN * $SRM_MOD_ASCT ) + $SRM_MVG_CROW ))
                    SRM_MVG_ADDE=0

                    # Adding pairs #
                    for SRM_MVG_SCDE in $(seq 1 10); do

                        # Compute pair range #
                        SRM_MVG_ATOL=$SRM_MVG_SCDE

                        # Computing limitation #
                        if (( $SRM_MVG_ATOL > 4 )); then SRM_MVG_ATOL=4; fi

                        # Parsing comparison tolerence #
                        for SRM_MVG_CTOL in $(seq -$SRM_MVG_ATOL $SRM_MVG_ATOL); do

                            # Compute pair index #
                            SRM_MVG_TEST=$(( ( $SRM_MVG_MAIN * $SRM_MOD_ASCT ) + ( $SRM_MVG_SCDE * $SRM_MOD_ASCT ) + ( ( $SRM_MVG_CROW + $SRM_MOD_ASCT + $SRM_MVG_CTOL ) % $SRM_MOD_ASCT ) ))

                            # Appending pair index #
                            if (( $SRM_MVG_TEST < $SRM_MVG_FILE * $SRM_MOD_ASCT )); then SRM_MVG_PAIR="$SRM_MVG_PAIR $SRM_MVG_TEST"; SRM_MVG_ADDE=$(( $SRM_MVG_ADDE + 1 )); fi

                        done

                    done

                    # Export pair line #
                    if (( $SRM_MVG_ADDE > 0 )); then echo $SRM_MVG_PAIR >> $SRM_EXE_OPOS/cluster/pairlist.txt; fi

                done

            done

        fi        

    }

# Module specific function (densification@omvs)
#
# This function is responsible of the creation of dense point clouds on the
# basis of the visual odometry and the provided images used to compute it. This
# function implements the openMVS densification software.

    function srm_openmvs() {

        # Local thread configuration #
        export OMP_NUM_THREADS=$(($SRM_PLL_CONF))

        # Initialize structure #
        mkdir -p $SRM_EXE_OPOS/cluster/omvs

        # Create links to source images #
        ln -sf $SRM_EXE_OPOS/cluster/images $SRM_EXE_OPOS/cluster/omvs/images

        # Going to cluster directory #
        SRM_EXE_XPAT=$(pwd); cd $SRM_EXE_OPOS/cluster/omvs

        # Preparing visual odometry for densification #
        InterfaceOpenMVG2 -i ../omvg/sfm_data.json -o ./sfm_data.mvs #&> /dev/null

        # Densification process #
        DensifyPointCloud -i sfm_data.mvs #&> /dev/null

        # Inject result in the standard structure #
        rsync ./sfm_data_dense.ply $SRM_EXE_OPOS/$SRM_MOD_AHAS.ply

        # Return to call directory #
        cd $SRM_EXE_XPAT

    }

# Module main function
#
# The main function is responsible of enumerating the poses that have to be
# considered and processed by the module kernel script. Moreover, the main
# function is also responsible of the management of the module execution mode.

    # Arguments and parameters #
    srm_arg $@

    # Compute module hash #
    SRM_MOD_OHAS=$(echo "$SRM_CMD_HASH" | sha256sum | cut -c 1-16)

    # Compute cluster hash #
    SRM_MOD_AHAS=$(echo "$SRM_MOD_MMSR" | sha256sum | cut -c 1-16)

    # Switch on execution mode #
    if [ "$SRM_MOD_EXEC" == "default" ]; then

        # Check source node #
        if [ ! -d $SRM_MNT_BASE/pose/$SRM_MOD_IHAS/ ] || (( ${#SRM_MOD_IHAS} != 16 )); then

            # Display message and update exit code #
            srm_echo "SRM Kernel : Error, unknown or invalid source node"; SRM_SIG_EXIT=1           

        else

            # Check source classification #
            if [ "$(cat $SRM_MNT_BASE/pose/$SRM_MOD_IHAS/info/class-output)" != "$SRM_IO_ICLASS" ]; then

                # Display message and update exit code #
                srm_echo "SRM Kernel : Error, invalid source classification"; SRM_SIG_EXIT=1

            else

                # Node initialization #
                srm_init

                # Display module summary #
                srm_echo "SRM Kernel : $(basename $0)"
                srm_echo "    cmd : $SRM_CMD_NORM"
                srm_echo "    sha : $SRM_CMD_HASH"
                srm_echo "    ish : $SRM_MOD_IHAS"
                srm_echo "    osh : $SRM_MOD_OHAS"
                srm_echo "    clh : $SRM_MOD_AHAS"
                srm_echo "SRM Kernel : analysing addresses"

                # Parse mmsr addresses #
                for SRM_EXE_MSSR in ${SRM_MOD_MMSR//,/ }; do

                    # Display mmsr address #
                    srm_echo "    analysing $SRM_EXE_MSSR address"

                    # Decompose mmsr address #
                    SRM_ADD_MAIN=(${SRM_EXE_MSSR//// })
                    SRM_ADD_POSE=(${SRM_ADD_MAIN[3]//-/ })

                    # Parse pose files #
                    for SRM_EXE_SRC in $SRM_MNT_BASE/pose/$SRM_MOD_IHAS/data/${SRM_ADD_MAIN[0]}/master/${SRM_ADD_MAIN[1]}/segment/${SRM_ADD_MAIN[2]}/pose/**/*; do

                        # Check for directory #
                        if [ -d $SRM_EXE_SRC ]; then

                            # Pose mmsr range detection #
                            if (( $(srm_selected $(basename $SRM_EXE_SRC) ${SRM_ADD_POSE[0]} ${SRM_ADD_POSE[1]}) == 1 )); then

                                # Update parallel directive #
                                SRM_PLL_POSE="$SRM_PLL_POSE $SRM_MOD_IHAS,$SRM_MOD_OHAS,${SRM_ADD_MAIN[0]},${SRM_ADD_MAIN[1]},${SRM_ADD_MAIN[2]},$(basename $SRM_EXE_SRC)"

                            fi

                        fi

                    done

                done

                # Check parallel directive #
                if [ -n "$SRM_PLL_POSE" ]; then

                    # Display module processing #
                    srm_echo "SRM Kernel : elements processing"

                    # Compose destination directory #
                    SRM_EXE_OPOS=$SRM_MNT_BASE/cluster/$SRM_MOD_OHAS/data/${SRM_MOD_AHAS:0:8}/$SRM_MOD_AHAS

                    # Check pose #
                    if ( [ -d $SRM_EXE_OPOS ] && [ "$SRM_MOD_FORC" == "true" ] ) || [ ! -d $SRM_EXE_OPOS ]; then

                        # Temporary storage #
                        srm_tmpfs create

                        # Remove previous data #
                        if [ -d $SRM_EXE_OPOS ]; then rm -rf $SRM_EXE_OPOS; fi

                        # Create destination directory #
                        mkdir -p $SRM_EXE_OPOS; mkdir -p $SRM_EXE_OPOS/source; mkdir -p $SRM_EXE_OPOS/cluster

                        # Display message #
                        srm_echo "    gathering stage ..."

                        # Parsing source elements #
                        for SRM_EXE_PATH in $SRM_PLL_POSE; do

                            # Decompose IO buffer #
                            SRM_EXE_PART=(${SRM_EXE_PATH//,/ })

                            # Compose source directory #
                            SRM_EXE_IPOS=$SRM_MNT_BASE/pose/${SRM_EXE_PART[0]}/data/${SRM_EXE_PART[2]}/master/${SRM_EXE_PART[3]}/segment/${SRM_EXE_PART[4]}/pose/$(srm_tshash ${SRM_EXE_PART[5]})/${SRM_EXE_PART[5]}

                            # Parsing element files #
                            for SRM_EXE_FILE in $SRM_EXE_IPOS/*; do

                                # Source data linkage #
                                ln -sf $SRM_EXE_FILE $SRM_EXE_OPOS/source/

                            done

                        done

                        # Display message #
                        srm_echo "    processing stage - visual odometry ..."

                        # Check module mode #
                        if [ "$SRM_MOD_MODE" == "openmvg" ]; then

                            # Refinement process #
                            srm_openmvg

                        elif [ "$SRM_MOD_MODE" == "openmvgrig" ]; then

                            # Initialize consistency check #
                            SRM_EXE_DEVI=""

                            # Consistency check #
                            for SRM_EXE_PATH in $SRM_PLL_POSE; do

                                # Decompose IO buffer #
                                SRM_EXE_PART=(${SRM_EXE_PATH//,/ })

                                # Check previous storage #
                                if [ -z "$SRM_EXE_DEVI" ]; then

                                    # Store found device #
                                    SRM_EXE_DEVI="${SRM_EXE_PART[2]}"

                                else

                                    # Check consistency #
                                    if [ "${SRM_EXE_PART[2]}" != "$SRM_EXE_DEVI" ]; then
                                    
                                        # Writing failure code #
                                        SRM_EXE_DEVI="null"

                                    fi

                                fi

                            done

                            # Check consistency result #
                            if [ "$SRM_EXE_DEVI" != "null" ]; then

                                # Refinement process #
                                srm_openmvgrig $SRM_EXE_DEVI

                            else

                                # Display message and update exit code #
                                srm_echo "SRM Kernel : Error, rig mode only available for single device image collection"; SRM_SIG_EXIT=1

                            fi

                        else

                            # Display message and update exit code #
                            srm_echo "SRM Kernel : Error, unknown module mode"; SRM_SIG_EXIT=1

                        fi

                        # Display message #
                        srm_echo "    processing stage - densification ..."

                        # Check module mode #
                        if [ "$SRM_MOD_DENS" == "openmvs" ]; then

                            # Refinement process #
                            srm_openmvs

                        else

                            # Display message and update exit code #
                            srm_echo "SRM Kernel : Error, unknown module mode"; SRM_SIG_EXIT=1

                        fi                    

                        # Check processing #
                        if (( $SRM_SIG_EXIT == 1 )); then

                            # Remove partially/aborted data #
                            if [ -d $SRM_EXE_OPOS ]; then rm -rf $SRM_EXE_OPOS; fi

                        fi

                        # Temporary storage #
                        srm_tmpfs delete

                    fi

                else

                    # Display message and update exit code #
                    srm_echo "SRM Kernel : elements out of addresses range"; SRM_SIG_EXIT=1

                fi

            fi

        fi

    elif [ "$SRM_MOD_EXEC" == "nodes" ]; then

        # Display available source nodes #
        for SRM_NOD_INPUT in $SRM_MNT_BASE/pose/*; do

            # Check the node input classification #
            if [ -e $SRM_NOD_INPUT/info/class-output ] && [ "$(cat $SRM_NOD_INPUT/info/class-output)" == "$SRM_IO_ICLASS" ]; then

                # Display source node #
                srm_echo "$(basename $SRM_NOD_INPUT)"

            fi

        done

    elif [ "$SRM_MOD_EXEC" == "hash" ]; then

        # Display module hash #
        srm_echo "$SRM_MOD_OHAS"

    elif [ "$SRM_MOD_EXEC" == "iclass" ]; then

        # Display classification #
        srm_echo "$SRM_IO_ICLASS"

    elif [ "$SRM_MOD_EXEC" == "oclass" ]; then

        # Display classification #
        srm_echo "$SRM_IO_OCLASS"

    else

        # Display message and update exit code #
        srm_echo "SRM - Kernel : Error, invalid module mode"; SRM_SIG_EXIT=1

    fi

    # Exit code #
    exit $SRM_SIG_EXIT

