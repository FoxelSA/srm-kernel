#!/bin/bash
# srm-kernel - Standard refinement modules
#
# Copyright (c) 2013-2015 FOXEL SA - http://foxel.ch
# Please read <http://foxel.ch/license> for more information.
#
#
# Author(s):
#
#       Nils Hamel <n.hamel@foxel.ch>
#
#
# This file is part of the FOXEL project <http://foxel.ch>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Additional Terms:
#
#       You are required to preserve legal notices and author attributions in
#       that material or in the Appropriate Legal Notices displayed by works
#       containing it.
#
#       You are required to attribute the work as explained in the "Usage and
#       Attribution" section of <http://foxel.ch/license>.

    # Storage variables #
    SRM_MNT_BASE="/data/"

    # Execution variables #
    SRM_KER_FORC="false"

    # Temporary storage variables #
    SRM_TMP_NAME=""

    # Communication variables #
    SRM_IO_PATH=""
    SRM_IO_IPOS=""
    SRM_IO_OPOS=""

    # Parallel variables #
    SRM_PLL_CONF="1"

    # Signal variables #
    SRM_SIG_EXIT=0

# Argument and parameter
#
# This function reads the module script arguments and parameters using the
# assuption that every argument always comes with a unique parameter.

    function srm_arg() {

        # Arguments and parameters #
        while [[ $# > 0 ]]; do

            # Read token and update head #
            srm_arg="$1"; shift
            srm_prm="$1"; shift

            # Switch on arguments #
            case $srm_arg in

                --mount-point)
                    SRM_MNT_BASE="$srm_prm"
                ;;
                --local-thread)
                    SRM_PLL_CONF="$srm_prm"
                ;;
                --force)
                    SRM_KER_FORC="$srm_prm"
                ;;
                --io)
                    SRM_IO_PATH="$srm_prm"
                ;;
                -m)
                    SRM_KER_MODE="$srm_prm"
                ;;

            esac

        done

    }

# Message display
#
# The following function simply displays the string provdided as parameter using
# the standard error output.

    function srm_echo() {

        # Display message #
        >&2 echo "$1"
        
    }

# Timestamps hashing
#
# This function returns the hashed (truncated) timestamps value for any given
# timestamp according to the storage structure standards. It corresponds to a
# simple division by ten.

    function srm_tshash() {

        # Retrieve unix timestamps #
        SRM_TS_UNIX=(${1//_/ })

        # Returns hashed timestmap #
        echo $(( ${SRM_TS_UNIX[0]} / 100 ))

    }

# Temporary file system
#
# This function creates a temporary storage (tmpfs) in case module requires
# fast-access storage. It also allows to delete the temporary storage as the
# module ends its task.

    function srm_tmpfs() {

        # Create temporary storage path #
        SRM_TMP_NAME=/run/shm/$(echo "$SRM_IO_PATH" | sha256sum | cut -c 1-32)

        # Temporary storage management #
        if [ "$1" == "create" ]; then

            # Create temporary storage #
            mkdir -p $SRM_TMP_NAME

        elif [ "$1" == "delete" ]; then

            # Check temporary storage #
            if [ -d $SRM_TMP_NAME ]; then

                # Delete temporary storage #
                rm -rf $SRM_TMP_NAME

            fi

        fi

    }

# Module kernel specific function - Elphel-plugin
#
# This function implements the Elphel plugin call to perform refinement of the
# data considered by the module. It starts by editing the configuration file in
# order to specify the correct path befor to call the plugin.

    function srm_elphel_plugin() {

        # Clear modified XML #
        > $2

        # Read XML by line #
        while read SRM_LINE; do   

            # Detects specific keys #
            if [[ $SRM_LINE == *"CORRECTION_PARAMETERS.smoothKernelDirectory"* ]]; then

                # Modulated exportation #
                echo "<entry key=\"CORRECTION_PARAMETERS.smoothKernelDirectory\">$3/calibration/kernels/smooth</entry>" >> $2

            elif [[ $SRM_LINE == *"CORRECTION_PARAMETERS.sharpKernelDirectory"* ]]; then

                # Modulated exportation #
                echo "<entry key=\"CORRECTION_PARAMETERS.sharpKernelDirectory\">$3/calibration/kernels/sharp</entry>" >> $2

            elif [[ $SRM_LINE == *"CORRECTION_PARAMETERS.sensorDirectory"* ]]; then

                # Modulated exportation #
                echo "<entry key=\"CORRECTION_PARAMETERS.sensorDirectory\">$3/calibration/sensors</entry>" >> $2

            elif [[ $SRM_LINE == *"CORRECTION_PARAMETERS.equirectangularDirectory"* ]]; then

                # Modulated exportation #
                echo "<entry key=\"CORRECTION_PARAMETERS.equirectangularDirectory\">$3/calibration/maps</entry>" >> $2

            elif [[ $SRM_LINE == *"CORRECTION_PARAMETERS.resultsDirectory"* ]]; then

                # Modulated exportation #
                echo "<entry key=\"CORRECTION_PARAMETERS.resultsDirectory\">$5</entry>" >> $2

            elif [[ $SRM_LINE == *"THREADS_MAX"* ]]; then

                # Modulated exportation #
                echo "<entry key=\"THREADS_MAX\">1</entry>" >> $2

            elif [[ $SRM_LINE == *"</properties>"* ]]; then

                # Reset count index #
                SRM_LS_NUMS=0

                # Enumeration of source file #
                for SRM_LS_FILE in $4/*.jp4; do

                    # Modulated exportation #
                    echo "<entry key=\"CORRECTION_PARAMETERS.sourcePath${SRM_LS_NUMS}\">$SRM_LS_FILE</entry>" >> $2

                    # Update index #
                    SRM_LS_NUMS=$(( $SRM_LS_NUMS + 1 ))

                done

                # Modulated exportation #
                echo "<entry key=\"CORRECTION_PARAMETERS.sourcePaths\">$SRM_LS_NUMS</entry>" >> $2

                # Export line #
                echo $SRM_LINE >> $2

            elif [[ ! $SRM_LINE == *"CORRECTION_PARAMETERS.sourcePath"* ]]; then

                # Export line #
                echo $SRM_LINE >> $2

            fi

        done < $1

        # Elphel plugin #
        ImageJ-linux64 --headless --mem 7150m --run Eyesis_Correction prefs=$2 &> /dev/null

        # Parsing result image #
        for SRM_EXE_FILE in $5/*.tiff; do

            # Extract file basename #
            SRM_EXE_BASE=$(basename $SRM_EXE_FILE)

            # Decompose basename #
            SRM_EXE_ELEM=(${SRM_EXE_BASE//-/ })

            # Recompose basename #
            SRM_EXE_NAME=${SRM_EXE_ELEM[0]}_${SRM_EXE_ELEM[1]}

            # Detect splitted tiles #
            if [[ $SRM_EXE_BASE == *"-LEFT"* ]]; then

                # Add suffix to recomposed basename #
                SRM_EXE_NAME=${SRM_EXE_NAME}_L

            elif [[ $SRM_EXE_BASE == *"-RIGHT"* ]]; then

                # Add suffix to recomposed basename #
                SRM_EXE_NAME=${SRM_EXE_NAME}_R

            fi

            # Adding extension to recomposed basename #
            SRM_EXE_NAME=$5/$SRM_EXE_NAME.tiff

            # Rename result file #
            mv $SRM_EXE_FILE $SRM_EXE_NAME

        done

    }

# Module kernel function
#
# The following instructions are responsible of performing the tasks the module
# is supposed to do and constitute the main kernel function. The kernel function
# is broadcasted to the different processing computer according to the available
# network topology.

    # Arguments and parameters #
    srm_arg $@

    # Decompose IO buffer #
    SRM_IO_PART=(${SRM_IO_PATH//,/ })

    # Compose source and destination #
    SRM_IO_IPOS=$SRM_MNT_BASE/pose/${SRM_IO_PART[0]}/data/${SRM_IO_PART[2]}/master/${SRM_IO_PART[3]}/segment/${SRM_IO_PART[4]}/pose/$(srm_tshash ${SRM_IO_PART[5]})/${SRM_IO_PART[5]}
    SRM_IO_OPOS=$SRM_MNT_BASE/pose/${SRM_IO_PART[1]}/data/${SRM_IO_PART[2]}/master/${SRM_IO_PART[3]}/segment/${SRM_IO_PART[4]}/pose/$(srm_tshash ${SRM_IO_PART[5]})/${SRM_IO_PART[5]}

    # Check source element #
    if [ ! -d $SRM_IO_IPOS ]; then

        # Display message #
        srm_echo "SRM Kernel : Error, invalid module kernel io specification"

        # Update exit code #
        SRM_SIG_EXIT=1

    else

        # Display message #
        srm_echo "    pose ${SRM_IO_PART[5]} of camera ${SRM_IO_PART[2]}"

        # Temporary storage #
        srm_tmpfs create

        # Check pose #
        if ( [ -d $SRM_IO_OPOS ] && [ "$SRM_KER_FORC" == "true" ] ) || [ ! -d $SRM_IO_OPOS ]; then

            # Create destination pose directory #
            mkdir -p $SRM_IO_OPOS

            # Check module refinement mode #
            if [ "$SRM_KER_MODE" == "elphel-plugin" ]; then

                # Refinement process #
                srm_elphel_plugin $SRM_MNT_BASE/camera/${SRM_IO_PART[2]}/imagej-elphel/prefs.xml $SRM_TMP_NAME/elphel-correction.xml $SRM_MNT_BASE/camera/${SRM_IO_PART[2]} $SRM_IO_IPOS $SRM_IO_OPOS

            else

                # Display message #
                srm_echo "SRM Kernel : Error, invalid module kernel mode specification"

                # Update exit code #
                SRM_SIG_EXIT=1

            fi

        fi

        # Temporary storage #
        srm_tmpfs delete

    fi

