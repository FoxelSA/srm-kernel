#!/bin/bash
# srm-kernel - Standard refinement modules
#
# Copyright (c) 2013-2015 FOXEL SA - http://foxel.ch
# Please read <http://foxel.ch/license> for more information.
#
#
# Author(s):
#
#       Nils Hamel <n.hamel@foxel.ch>
#
#
# This file is part of the FOXEL project <http://foxel.ch>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Additional Terms:
#
#       You are required to preserve legal notices and author attributions in
#       that material or in the Appropriate Legal Notices displayed by works
#       containing it.
#
#       You are required to attribute the work as explained in the "Usage and
#       Attribution" section of <http://foxel.ch/license>.

    # Storage variables #
    SRM_MNT_BASE="/data/"

    # Execution variables #
    SRM_KER_FORC="false"
    SRM_KER_MODE="unknown"

    # Temporary storage variables #
    SRM_TMP_NAME=""

    # Communication variables #
    SRM_IO_PATH=""
    SRM_IO_IPOS=""
    SRM_IO_OPOS=""

    # Parallel variables #
    SRM_PLL_CONF="1"

    # Signal variables #
    SRM_SIG_EXIT=0

# Argument and parameter
#
# This function reads the module script arguments and parameters using the
# assuption that every argument always comes with a unique parameter.

    function srm_arg() {

        # Arguments and parameters #
        while [[ $# > 0 ]]; do

            # Read token and update head #
            srm_arg="$1"; shift
            srm_prm="$1"; shift

            # Switch on arguments #
            case $srm_arg in

                --mount-point)
                    SRM_MNT_BASE="$srm_prm"
                ;;
                --local-thread)
                    SRM_PLL_CONF="$srm_prm"
                ;;
                --force)
                    SRM_KER_FORC="$srm_prm"
                ;;
                --io)
                    SRM_IO_PATH="$srm_prm"
                ;;
                -m)
                    SRM_KER_MODE="$srm_prm"
                ;;

            esac

        done

    }

# Message display
#
# The following function simply displays the string provdided as parameter using
# the standard error as output.

    function srm_echo() {

        # Display message #
        >&2 echo "$1"
        
    }

# Timestamps hashing
#
# This function returns the hashed (truncated) timestamps value for any given
# timestamp according to the storage structure standards. It corresponds to a
# simple division by ten.

    function srm_tshash() {

        # Retrieve unix timestamps #
        SRM_TS_UNIX=(${1//_/ })

        # Returns hashed timestamps #
        echo $(( ${SRM_TS_UNIX[0]} / 100 ))

    }

# Temporary file system
#
# This function creates a temporary storage (tmpfs) in case module requires
# fast-access storage. It also allows to delete the temporary storage as the
# module ends its task.

    function srm_tmpfs() {

        # Create temporary storage path #
        SRM_TMP_NAME=/run/shm/$(echo "$SRM_IO_PATH" | sha256sum | cut -c 1-32)

        # Temporary storage management #
        if [ "$1" == "create" ]; then

            # Create temporary storage #
            mkdir -p $SRM_TMP_NAME

        elif [ "$1" == "delete" ]; then

            # Check temporary storage #
            if [ -d $SRM_TMP_NAME ]; then

                # Delete temporary storage #
                rm -rf $SRM_TMP_NAME

            fi

        fi

    }

# Calibration data access
#
# This function allows to query calibration data through the standard storage
# structure. It expects the device MAC address and the key of the desired value
# and returns it when the key is found in the calibration data. An empty string
# is return otherwise.

    function srm_askc() {

        # Reads and returns value of key #
        echo $(grep "$2" $SRM_MNT_BASE/camera/$1/fastcal/calibration.key | cut -d'=' -f2)

    }

# Module kernel specific function (norama@eyesis4pi)
#
# This function computes the rectilinear projection of the sensors image coming
# from an Elphel Eyesis4pi camera based on the equirectangular mappings of the
# sensors image.

    function srm_norama_eyesis4pi() {

        # Parsing source files #
        for SRM_TILE in $(seq -f '%02g' 0 $(( $(srm_askc ${SRM_IO_PART[2]} "channels") - 1 ))); do

            # Retrieve mapping size #
            SRM_WMAP=$(srm_askc ${SRM_IO_PART[2]} "ImageFullWidth_$SRM_TILE" )
            SRM_HMAP=$(srm_askc ${SRM_IO_PART[2]} "ImageFullLength_$SRM_TILE")

            # Retrieve tile size #
            SRM_WTIL=$(srm_askc ${SRM_IO_PART[2]} "pixelCorrectionWidth_$SRM_TILE" )
            SRM_HTIL=$(srm_askc ${SRM_IO_PART[2]} "pixelCorrectionHeight_$SRM_TILE")

            # Retrieve tile position #
            SRM_XPOS=$(srm_askc ${SRM_IO_PART[2]} "XPosition_$SRM_TILE")
            SRM_YPOS=$(srm_askc ${SRM_IO_PART[2]} "YPosition_$SRM_TILE")
            SRM_0POS=0

            # Retrieve projection angles #
            SRM_AZIM=$(srm_askc ${SRM_IO_PART[2]} "azimuth_$SRM_TILE"  ); SRM_AZIM=${SRM_AZIM//+}; SRM_AZIM=$(echo "(${SRM_AZIM/[eE]/*10^})*(180/3.1415926535)" | bc -l)
            SRM_HEAD=$(srm_askc ${SRM_IO_PART[2]} "heading_$SRM_TILE"  ); SRM_HEAD=${SRM_HEAD//+}; SRM_HEAD=$(echo "(${SRM_HEAD/[eE]/*10^})*(180/3.1415926535)" | bc -l)
            SRM_ELEV=$(srm_askc ${SRM_IO_PART[2]} "elevation_$SRM_TILE"); SRM_ELEV=${SRM_ELEV//+}; SRM_ELEV=$(echo "(${SRM_ELEV/[eE]/*10^})*(180/3.1415926535)" | bc -l)
            SRM_ROLL=$(srm_askc ${SRM_IO_PART[2]} "roll_$SRM_TILE"     ); SRM_ROLL=${SRM_ROLL//+}; SRM_ROLL=$(echo "(${SRM_ROLL/[eE]/*10^})*(180/3.1415926535)" | bc -l)

            # Compute inverted gnomonic projection #
            norama-direct -E -i $SRM_IO_IPOS/${SRM_IO_POSE}_$SRM_TILE.tiff -o $SRM_TMP_NAME/${SRM_IO_POSE}_$SRM_TILE.tiff \
            --interpolation bicubicf \
            --threads     $SRM_PLL_CONF \
            --rect-width  $SRM_WTIL \
            --rect-height $SRM_HTIL \
            --map-width   $SRM_WMAP \
            --map-height  $SRM_HMAP \
            --sight-x     $(srm_askc ${SRM_IO_PART[2]} "px0_$SRM_TILE") \
            --sight-y     $(srm_askc ${SRM_IO_PART[2]} "py0_$SRM_TILE") \
            --tile-x      $SRM_XPOS \
            --tile-y      $SRM_YPOS \
            --azimuth     $SRM_AZIM \
            --heading     $SRM_HEAD \
            --elevation   $SRM_ELEV \
            --roll        $SRM_ROLL \
            --focal       $(srm_askc ${SRM_IO_PART[2]} "focalLength_$SRM_TILE") \
            --pixel       $(srm_askc ${SRM_IO_PART[2]} "pixelSize_$SRM_TILE") \
            --force-rgb

            # Inject results in storage structure #
            rsync $SRM_TMP_NAME/${SRM_IO_POSE}_$SRM_TILE.tiff $SRM_IO_OPOS/${SRM_IO_POSE}_$SRM_TILE.tiff

        done

    }

# Module kernel function
#
# The kernel function is responsible of analyzing instructions provided by the
# module main script and to trigger selected poses processing. This function is
# broadcasted to the computers and threads according to the provided network
# topology.

    # Arguments and parameters #
    srm_arg $@

    # Decompose IO buffer #
    SRM_IO_PART=(${SRM_IO_PATH//,/ })

    # Compose pose identification #
    SRM_IO_POSE=${SRM_IO_PART[5]}

    # Compose pose source and destination directories #
    SRM_IO_IPOS=$SRM_MNT_BASE/pose/${SRM_IO_PART[0]}/data/${SRM_IO_PART[2]}/master/${SRM_IO_PART[3]}/segment/${SRM_IO_PART[4]}/pose/$(srm_tshash ${SRM_IO_PART[5]})/${SRM_IO_PART[5]}
    SRM_IO_OPOS=$SRM_MNT_BASE/pose/${SRM_IO_PART[1]}/data/${SRM_IO_PART[2]}/master/${SRM_IO_PART[3]}/segment/${SRM_IO_PART[4]}/pose/$(srm_tshash ${SRM_IO_PART[5]})/${SRM_IO_PART[5]}

    # Check source element #
    if [ ! -d $SRM_IO_IPOS ]; then

        # Display message and update exit code #
        srm_echo "SRM Kernel : Error, invalid module kernel io specification"; SRM_SIG_EXIT=1

    else

        # Display message #
        srm_echo "    element ${SRM_IO_PART[5]}"

        # Check module mode #
        if [ "$SRM_KER_MODE" == "norama-suite" ]; then

            # Check device type #
            if [ "$(srm_askc ${SRM_IO_PART[2]} "type")" == "eyesis4pi" ]; then

                # Check pose #
                if ( [ -d $SRM_IO_OPOS ] && [ "$SRM_KER_FORC" == "true" ] ) || [ ! -d $SRM_IO_OPOS ]; then

                    # Temporary storage #
                    srm_tmpfs create

                    # Remove previous data #
                    if [ -d $SRM_IO_OPOS ]; then rm -rf $SRM_IO_OPOS; fi

                    # Create destination directory #
                    mkdir -p $SRM_IO_OPOS

                    # Refinement process #
                    srm_norama_eyesis4pi

                    # Temporary storage #
                    srm_tmpfs delete

                fi

            else

                # Display message and update exit code #
                srm_echo "SRM Kernel : Error, unknown device type"; SRM_SIG_EXIT=1

            fi

        else

            # Display message and update exit code #
            srm_echo "SRM Kernel : Error, unknown module mode"; SRM_SIG_EXIT=1

        fi

    fi

    # Exit code #
    exit $SRM_SIG_EXIT

