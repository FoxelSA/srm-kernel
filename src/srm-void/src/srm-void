#!/bin/bash
# srm-kernel - Standard refinement modules
#
# Copyright (c) 2013-2015 FOXEL SA - http://foxel.ch
# Please read <http://foxel.ch/license> for more information.
#
#
# Author(s):
#
#       Nils Hamel <n.hamel@foxel.ch>
#
#
# This file is part of the FOXEL project <http://foxel.ch>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Additional Terms:
#
#       You are required to preserve legal notices and author attributions in
#       that material or in the Appropriate Legal Notices displayed by works
#       containing it.
#
#       You are required to attribute the work as explained in the "Usage and
#       Attribution" section of <http://foxel.ch/license>.

    # SRM standard variables #
    SRM_STDCMD="$(basename $0)"
    SRM_HASCMD="$(basename $0)"
    SRM_MPOINT="/data/"

# Argument and parameter parser
#
# This function simply reads the arguments and parameter and stores the
# parameters in the configured variables.

    function srm_arg() {

        # Parses the arguments and parameters #
        while [[ $# > 0 ]]; do

            # Push token and update cursor #
            srm_arg="$1"; shift
            srm_prm="$1"; shift

            # Switch on arguments #
            case $srm_push in

                --mount-point)
                    SRM_MPOINT="$srm_prm"
                ;;

            esac

            # Compose standard command #
            SRM_STDCMD="$SRM_STDCMD $srm_arg $srm_prm"

            # Detects argument and parameter not to consider in hash computation #
            if [ "${srm_arg:1:1}" != "-" ]; then 

                # Compose hash command #
                SRM_HASCMD="$SRM_HASCMD $srm_arg $srm_prm"; 

            fi

        done

    }

# Message display
#
# This function simply display the string provdided as parameter on the standard
# error output.

    function srm_echo() {

        # Display message on standard error output #
        >&2 echo "$1"
        
    }

# Module hash computation
#
# This function computes the hash used to define the srm module in the storage
# structure. An SHA256 is considered as hash algorithm and only the 16 first
# hexadecimal digits of the hash are kept.

    function srm_hash() {

        # Compute the sha256 sum #
        SRM_SHASUM=$(echo "$1" | sha256sum)

        # Return truncated sha256 sum #
        echo "${SRM_SHASUM:0:16}"

    }

# Argument and parameter parser #
srm_arg $@

# Compute module hash sum #
SRM_MDHASH=$(srm_hash "$SRM_HASCMD")

srm_echo "Command : $SRM_STDCMD"
srm_echo "Hashcmd : $SRM_HASCMD"
srm_echo "Hash    : $SRM_MDHASH"

