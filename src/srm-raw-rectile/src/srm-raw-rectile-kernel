#!/bin/bash
# srm-kernel - Standard refinement modules
#
# Copyright (c) 2013-2015 FOXEL SA - http://foxel.ch
# Please read <http://foxel.ch/license> for more information.
#
#
# Author(s):
#
#       Nils Hamel <n.hamel@foxel.ch>
#
#
# This file is part of the FOXEL project <http://foxel.ch>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Additional Terms:
#
#       You are required to preserve legal notices and author attributions in
#       that material or in the Appropriate Legal Notices displayed by works
#       containing it.
#
#       You are required to attribute the work as explained in the "Usage and
#       Attribution" section of <http://foxel.ch/license>.

    # Storage variables #
    SRM_MNT_BASE="/data/"

    # Execution variables #
    SRM_KER_FORC="false"
    SRM_KER_MODE="unknown"

    # Temporary storage variables #
    SRM_TMP_NAME=""

    # Communication variables #
    SRM_IO_PATH=""
    SRM_IO_IPOS=""
    SRM_IO_OPOS=""

    # Parallel variables #
    SRM_PLL_CONF="1"

    # Signal variables #
    SRM_SIG_EXIT=0

# Argument and parameter
#
# This function reads the module script arguments and parameters using the
# assuption that every argument always comes with a unique parameter.

    function srm_arg() {

        # Arguments and parameters #
        while [[ $# > 0 ]]; do

            # Read token and update head #
            srm_arg="$1"; shift
            srm_prm="$1"; shift

            # Switch on arguments #
            case $srm_arg in

                --mount-point)
                    SRM_MNT_BASE="$srm_prm"
                ;;
                --local-thread)
                    SRM_PLL_CONF="$srm_prm"
                ;;
                --force)
                    SRM_KER_FORC="$srm_prm"
                ;;
                --io)
                    SRM_IO_PATH="$srm_prm"
                ;;

            esac

        done

    }

# Message display
#
# The following function simply displays the string provdided as parameter using
# the standard error output.

    function srm_echo() {

        # Display message #
        >&2 echo "$1"
        
    }

# Timestamps hashing
#
# This function returns the hashed (truncated) timestamps value for any given
# timestamp according to the storage structure standards. It corresponds to a
# simple division by ten.

    function srm_tshash() {

        # Retrieve unix timestamps #
        SRM_TS_UNIX=(${1//_/ })

        # Returns hashed timestmap #
        echo $(( ${SRM_TS_UNIX[0]} / 100 ))

    }

# Temporary file system
#
# This function creates a temporary storage (tmpfs) in case module requires
# fast-access storage. It also allows to delete the temporary storage as the
# module ends its task.

    function srm_tmpfs() {

        # Create temporary storage path #
        SRM_TMP_NAME=/run/shm/$(echo "$SRM_IO_PATH" | sha256sum | cut -c 1-32)

        # Temporary storage management #
        if [ "$1" == "create" ]; then

            # Create temporary storage #
            mkdir -p $SRM_TMP_NAME

        elif [ "$1" == "delete" ]; then

            # Check temporary storage #
            if [ -d $SRM_TMP_NAME ]; then

                # Delete temporary storage #
                rm -rf $SRM_TMP_NAME

            fi

        fi

    }

# Calibration data access
#
# This function allows to query calibration data through the standard storage
# structure. It expects the device MAC address and the key of the desired value
# and returns it when the key is found in the calibration data. An empty string
# is return otherwise.

    function srm_askc() {

        # Read and returns value of key #
        echo $(grep "$2" $SRM_MNT_BASE/camera/$1/fastcal/calibration.key | cut -d'=' -f2)

    }

# Module kernel specific function (channel-extraction@eyesis4pi)
#
# This function is responsible of the camera channels image extraction on the
# basis of the composite raw image coming from camera modules. It expects the
# module number (1-9), the camera MAC address and the pose identification. On
# this basis it extract the channels image and apply the required symetries
# according to the calibration data.

    function srm_channels_eyesis4pi() {

        # Check module index #
        if (( $1 == 9 )); then

            # Create channels array #
            SRM_LIST="24 25"

        else

            # Create channels array #
            SRM_LIST="$(printf '%02d' $(($1-1))) $(printf '%02d' $(($1+7))) $(printf '%02d' $(($1+15)))"

        fi

        # Initialize loop index #
        SRM_INDX=0

        # Parsing channels array #
        for SRM_CHAN in $SRM_LIST; do

            # Reset convert configuration option #
            SRM_FLIP=""

            # Compute channel crop rectangle #
            SRM_CRPW=$(srm_askc $2 "pixelCorrectionWidth_$SRM_CHAN" )
            SRM_CRPH=$(srm_askc $2 "pixelCorrectionHeight_$SRM_CHAN")
            SRM_CRPX=0
            SRM_CRPY=$(( $SRM_INDX * ( ${SRM_CRPH} + 16 ) ))

            # Crop channel rectangle #
            convert $SRM_TMP_NAME/${3}_$1.tiff -crop ${SRM_CRPW}x${SRM_CRPH}+${SRM_CRPX}+${SRM_CRPY} $SRM_TMP_NAME/${3}_${SRM_CHAN}_channel.tiff &>/dev/null

            # Remove EXIF information from channel image #
            exiv2 rm $SRM_TMP_NAME/${3}_${SRM_CHAN}_channel.tiff &>/dev/null

            # Compute channel symetries #
            SRM_SYMH=$(srm_askc $2 "hflip_$SRM_CHAN")
            SRM_SYMV=$(srm_askc $2 "vflip_$SRM_CHAN")

            # Compose convert configuration variable #
            if (( $SRM_SYMH == 1 )); then SRM_FLIP="$SRM_FLIP -flop"; fi
            if (( $SRM_SYMV == 1 )); then SRM_FLIP="$SRM_FLIP -flip"; fi

            # Apply channel symetries #
            convert $SRM_FLIP $SRM_TMP_NAME/${3}_${SRM_CHAN}_channel.tiff $SRM_TMP_NAME/${3}_${SRM_CHAN}.tiff &>/dev/null

            # Inject result in storage structure #
            rsync $SRM_TMP_NAME/${3}_${SRM_CHAN}.tiff $SRM_IO_OPOS/${3}_${SRM_CHAN}.tiff

            # Update loop index #
            SRM_INDX=$(( $SRM_INDX + 1 ))

        done

    }

# Module kernel function
#
# The following instructions are responsible of performing the tasks the module
# is supposed to do and constitute the main kernel function. The kernel function
# is broadcasted to the different available computers according to the specified
# network topology.

    # Arguments and parameters #
    srm_arg $@

    # Decompose IO buffer #
    SRM_IO_PART=(${SRM_IO_PATH//,/ })

    # Compose pose identification #
    SRM_IO_POSE=${SRM_IO_PART[5]}

    # Compose source and destination #
    SRM_IO_IPOS=$SRM_MNT_BASE/pose/${SRM_IO_PART[0]}/data/${SRM_IO_PART[2]}/master/${SRM_IO_PART[3]}/segment/${SRM_IO_PART[4]}/pose/$(srm_tshash ${SRM_IO_PART[5]})/${SRM_IO_PART[5]}
    SRM_IO_OPOS=$SRM_MNT_BASE/pose/${SRM_IO_PART[1]}/data/${SRM_IO_PART[2]}/master/${SRM_IO_PART[3]}/segment/${SRM_IO_PART[4]}/pose/$(srm_tshash ${SRM_IO_PART[5]})/${SRM_IO_PART[5]}

    # Check source element #
    if [ ! -d $SRM_IO_IPOS ]; then

        # Display message #
        srm_echo "SRM Kernel : Error, invalid module kernel io specification"

        # Update exit code #
        SRM_SIG_EXIT=1

    else

        # Display message #
        srm_echo "    pose ${SRM_IO_PART[5]} of camera ${SRM_IO_PART[2]}"

        # Check device type #
        if [ "$(srm_askc ${SRM_IO_PART[2]} "type")" == "eyesis4pi" ]; then

            # Check pose #
            if ( [ -d $SRM_IO_OPOS ] && [ "$SRM_KER_FORC" == "true" ] ) || [ ! -d $SRM_IO_OPOS ]; then

                # Temporary storage #
                srm_tmpfs create

                # Remove previous data #
                if [ -d $SRM_IO_OPOS ]; then rm -rf $SRM_IO_OPOS; fi

                # Create destination directory #
                mkdir -p $SRM_IO_OPOS

                # Retrieve device calibration #
                SRM_MODS=$(srm_askc ${SRM_IO_PART[2]} "modules")

                # Retrieve number of modules #
                for SRM_IDX in $(seq 1 $SRM_MODS); do

                    # Move source file to temporary storage #
                    cp -L $SRM_IO_IPOS/${SRM_IO_POSE}_$SRM_IDX.jp4 $SRM_TMP_NAME/${SRM_IO_POSE}_$SRM_IDX.jp4

                    # Convert jp4 source file to adobe format #
                    movie2dng --no-dng-rotation --dng $SRM_TMP_NAME/${SRM_IO_POSE}_$SRM_IDX.jp4 &>/dev/null

                    # Apply debayer on source image #
                    dcraw -q 3 -T $SRM_TMP_NAME/${SRM_IO_POSE}_$SRM_IDX.dng &>/dev/null

                    # Remove EXIF information from module image #
                    exiv2 rm $SRM_TMP_NAME/${SRM_IO_POSE}_$SRM_IDX.tiff &>/dev/null

                    # Process channels #
                    srm_channels_eyesis4pi $SRM_IDX ${SRM_IO_PART[2]} $SRM_IO_POSE

                done

                # Temporary storage #
                srm_tmpfs delete

            fi

        else

            # Display message #
            srm_echo "SRM Kernel : Error, unknown device type"

            # Update exit code #
            SRM_SIG_EXIT=1

        fi

    fi

    # Exit code #
    exit $SRM_SIG_EXIT

