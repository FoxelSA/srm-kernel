#!/bin/bash
# srm-kernel - Standard refinement modules
#
# Copyright (c) 2013-2015 FOXEL SA - http://foxel.ch
# Please read <http://foxel.ch/license> for more information.
#
#
# Author(s):
#
#       Nils Hamel <n.hamel@foxel.ch>
#
#
# This file is part of the FOXEL project <http://foxel.ch>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Additional Terms:
#
#       You are required to preserve legal notices and author attributions in
#       that material or in the Appropriate Legal Notices displayed by works
#       containing it.
#
#       You are required to attribute the work as explained in the "Usage and
#       Attribution" section of <http://foxel.ch/license>.

    # Storage variables #
    SRM_MNT_BASE="/data/"

    # Classification variables #
    SRM_IO_ICLASS="eyesis4pi-raw"
    SRM_IO_OCLASS="template-module"

    # Command variables #
    SRM_CMD_NORM="$(basename $0)"
    SRM_CMD_HASH="$(basename $0)"

    # Execution variables #
    SRM_MOD_EXEC="default"
    SRM_MOD_MMSR=""
    SRM_MOD_NODE=""

    # Statistic variables #
    SRM_STA_POSE=0
    SRM_STA_PROC=0

    # Parallel variables #
    SRM_PLL_POSE=""
    SRM_PLL_CONF="1"

    # Signal variables #
    SRM_SIG_EXIT=0

# Argument and parameter
#
# This function reads the module script arguments and parameters using the
# assuption that every argument always comes with a unique parameter. Moreover
# this function creates and normalized and simplified representation of the
# script command.

    function srm_arg() {

        # Arguments and parameters #
        while [[ $# > 0 ]]; do

            # Read token and update head #
            srm_arg="$1"; shift
            srm_prm="$1"; shift

            # Switch on arguments #
            case $srm_arg in

                --mount-point)
                    SRM_MNT_BASE="$srm_prm"
                ;;
                --address)
                    SRM_MOD_MMSR="$SRM_MOD_MMSR $srm_prm"
                ;;
                --display)
                    SRM_MOD_EXEC="$srm_prm"
                ;;
                --thread)
                    SRM_PLL_CONF="$srm_prm"
                ;;
                -n)
                    SRM_MOD_NODE="$srm_prm"
                ;;

            esac

            # Compose normalized command #
            SRM_CMD_NORM="$SRM_CMD_NORM $srm_arg $srm_prm"

            # Filter arguments and parameters #
            if [ "${srm_arg:1:1}" != "-" ]; then 

                # Compose simplified command #
                SRM_CMD_HASH="$SRM_CMD_HASH $srm_arg $srm_prm"; 

            fi

        done

    }

# Message display
#
# The following function simply displays the string provdided as parameter using
# the standard error output.

    function srm_echo() {

        # Display message #
        >&2 echo "$1"
        
    }

# Module hash
#
# This function computes the hash used to identify the module processing results
# in the storage structure. An SHA256 sum is considered as hash algorithm and
# only the 16 first hexadecimal digits of the hash are kept.

    function srm_hash() {

        # Compute SHA256 sum #
        SRM_SHA_S256=$(echo "$1" | sha256sum)

        # Truncate SHA256 sum #
        echo "${SRM_SHA_S256:0:16}"

    }

# Timestamps hashing
#
# This function returns the hashed (truncated) timestamps value for any given
# timestamp according to the storage structure standards. It corresponds to a
# simple division by ten.

    function srm_tshash() {

        # Retrieve unix timestamps #
        SRM_TS_UNIX=(${1//_/ })

        # Returns hashed timestmap #
        echo $(( ${SRM_TS_UNIX[0]} / 100 ))

    }

# Parallel configuration
#
# This function establish the configuration of module parallel processing. If
# a network topology configuration file is provided, it is considered by GNU
# parallel. Otherwise, the parameter is interpreted as the number of thread to
# use on the local machine.

    function srm_parallel() {

        # Check for file #
        if [ -e $SRM_PLL_CONF ]; then

            # Compose parallel command #
            echo "--sshconfig $SRM_PLL_CONF"

        else

            # Compose parallel command #
            echo "-j$SRM_PLL_CONF"

        fi

    }

# Timestamps selection
#
# This function detects if a given timestamps, provided by the considered pose,
# is in the range of a mmsr address. In order to perform the check, the function
# waits the pose timestamps and the two downer and upper timestamps of the mmsr
# address to provide an answer.

    function srm_selected() {

        # Decompose pose timestamps #
        SRM_TS_PART=(${1//_/ })
        SRM_TS_UNIX=${SRM_TS_PART[0]}
        SRM_TS_USEC=${SRM_TS_PART[1]}

        # Decompose mmsr downer and upper timestamps #
        SRM_ML_PART=(${2//_/ })
        SRM_MH_PART=(${3//_/ })
        SRM_ML_UNIX=${SRM_ML_PART[0]}
        SRM_MH_UNIX=${SRM_MH_PART[0]}
        SRM_ML_USEC=${SRM_ML_PART[1]}
        SRM_MH_USEC=${SRM_MH_PART[1]}

        # Initialize result #
        SRM_RETURN=1

        # Check downer boundary #
        if (( $SRM_TS_UNIX < $SRM_ML_UNIX )); then

            # Return result #
            SRM_RETURN=0

        fi

        # Check downer boundary #
        if (( $SRM_TS_UNIX == $SRM_ML_UNIX )); then

            # Check decimale boundary #
            if (( $SRM_TS_USEC < $SRM_ML_USEC )); then

                # Return result #
                SRM_RETURN=0

            fi

        fi

        # Check upper boundary #
        if (( $SRM_TS_UNIX > $SRM_MH_UNIX )); then

            # Return result #
            SRM_RETURN=0

        fi

        # Check upper boundary #
        if (( $SRM_TS_UNIX == $SRM_MH_UNIX )); then

            # Check decimale boundary #
            if (( $SRM_TS_USEC > $SRM_ML_USEC )); then

                # Return result #
                SRM_RETURN=0

            fi

        fi

        # Return result #
        echo $SRM_RETURN

    }

# Node initialization #
#
# This function initialize the module node directories and files structure and
# creates the information files. When the structure is already initialized, the
# function only complete required information.

    function srm_init() {

        # Node directory #
        mkdir -p $SRM_MNT_BASE/pose/$SRM_MOD_HASH

        # Node structure #
        mkdir -p $SRM_MNT_BASE/pose/$SRM_MOD_HASH/info
        mkdir -p $SRM_MNT_BASE/pose/$SRM_MOD_HASH/data

        # Node classification #
        echo $SRM_IO_OCLASS > $SRM_MNT_BASE/pose/$SRM_MOD_HASH/info/classification

        # Node filiation #
        echo $SRM_MOD_NODE > $SRM_MNT_BASE/pose/$SRM_MOD_HASH/info/filiation

        # Node simplified commands #
        echo $SRM_CMD_HASH > $SRM_MNT_BASE/pose/$SRM_MOD_HASH/info/command

        # Node normalized commands history #
        echo "$(date),$USER@$HOSTNAME,$HOSTTYPE,$(lsb_release -si) $(lsb_release -sr)" >> $SRM_MNT_BASE/pose/$SRM_MOD_HASH/info/history
        echo "$ $SRM_CMD_NORM" >> $SRM_MNT_BASE/pose/$SRM_MOD_HASH/info/history
        

    }

# Module main function
#
# The following instrucations constitute the module main function. The main
# function is responsible of enumerating the poses that have to be considered
# by the module kernel script which is responsible of the poses processing.
#
# The main function is also responsible of the management of errors and the 
# exit message to the system.

    # Arguments and parameters #
    srm_arg $@

    # Compute module hash #
    SRM_MOD_HASH=$(srm_hash "$SRM_CMD_HASH")

    # Switch on execution mode #
    if [ "$SRM_MOD_EXEC" == "default" ]; then

        # Check source node #
        if [ ! -d $SRM_MNT_BASE/pose/$SRM_MOD_NODE/ ]; then

            # Display message #
            srm_echo "SRM Kernel : Error, unknown source node"; SRM_SIG_EXIT=1

        else

            # Check source classification #
            if [ "$(cat $SRM_MNT_BASE/pose/$SRM_MOD_NODE/info/classification)" != "$SRM_IO_ICLASS" ]; then

                # Display message #
                srm_echo "SRM Kernel : Error, invalid source classification"; SRM_SIG_EXIT=1

            else

                # Node initialization #
                srm_init

                # Display module summary #
                srm_echo "SRM Kernel : $(basename $0)"
                srm_echo "    cmd : $SRM_CMD_NORM"
                srm_echo "    sha : $SRM_CMD_HASH"
                srm_echo "    has : $SRM_MOD_HASH"
                srm_echo "    src : $SRM_MOD_NODE"

                # Parse mmsr addresses #
                for SRM_EXE_MSSR in $SRM_MOD_MMSR; do

                    # Display mmsr address #
                    srm_echo "SRM Kernel : address $SRM_EXE_MSSR"

                    # Reset statistic #
                    SRM_STA_POSE=0
                    SRM_STA_PROC=0

                    # Decompose mmsr address #
                    SRM_ADD_MAIN=(${SRM_EXE_MSSR//// })
                    SRM_ADD_POSE=(${SRM_ADD_MAIN[3]//-/ })

                    # Display mmsr address summary #
                    srm_echo "    mac : ${SRM_ADD_MAIN[0]}"
                    srm_echo "    mas : ${SRM_ADD_MAIN[1]}"
                    srm_echo "    seg : ${SRM_ADD_MAIN[2]}"
                    srm_echo "    ran : ${SRM_ADD_POSE[0]} to ${SRM_ADD_POSE[1]}"

                    # Compose source node #
                    SRM_EXE_POSE=$SRM_MNT_BASE/pose
                    SRM_EXE_POSE=$SRM_EXE_POSE/$SRM_MOD_NODE/data
                    SRM_EXE_POSE=$SRM_EXE_POSE/${SRM_ADD_MAIN[0]}/master
                    SRM_EXE_POSE=$SRM_EXE_POSE/${SRM_ADD_MAIN[1]}/segment
                    SRM_EXE_POSE=$SRM_EXE_POSE/${SRM_ADD_MAIN[2]}/pose

                    # Parse mmrs address poses #
                    for SRM_EXE_HAS in $SRM_EXE_POSE/*; do
                    for SRM_EXE_SRC in $SRM_EXE_HAS/* ; do

                        # Check for directorie  #
                        if [ -d $SRM_EXE_SRC ]; then

                            # Update statistic #
                            SRM_STA_POSE=$(( $SRM_STA_POSE + 1 ))

                            # Pose mmsr range detection #
                            if (( $(srm_selected $(basename $SRM_EXE_SRC) ${SRM_ADD_POSE[0]} ${SRM_ADD_POSE[1]}) == 1 )); then

                                # Update statistic #
                                SRM_STA_PROC=$(( $SRM_STA_PROC + 1 ))

                                # Compose destination node #
                                SRC_EXE_DST=$SRM_MNT_BASE/pose
                                SRC_EXE_DST=$SRC_EXE_DST/$SRM_MOD_HASH/data
                                SRC_EXE_DST=$SRC_EXE_DST/${SRM_ADD_MAIN[0]}/master
                                SRC_EXE_DST=$SRC_EXE_DST/${SRM_ADD_MAIN[1]}/segment  
                                SRC_EXE_DST=$SRC_EXE_DST/${SRM_ADD_MAIN[2]}/pose
                                SRC_EXE_DST=$SRC_EXE_DST/$(srm_tshash $(basename $SRM_EXE_SRC))/$(basename $SRM_EXE_SRC)

                                # Create pose directory #
                                mkdir -p $SRC_EXE_DST

                                # Update parallel directive #
                                SRM_PLL_POSE="$SRM_PLL_POSE ${SRM_ADD_MAIN[0]},$SRM_EXE_SRC,$SRC_EXE_DST"

                            fi

                        fi

                    done
                    done

                    # Display statistic #
                    srm_echo "    res : $SRM_STA_PROC/$SRM_STA_POSE"

                done

                # Check parallel directive #
                if [ -n "$SRM_PLL_POSE" ]; then

                    # Kernel script call #
                    parallel --ungroup --retries 5 $(srm_parallel) $(basename $0)-kernel $@ --io {} ::: $SRM_PLL_POSE

                fi

            fi

        fi

    elif [ "$SRM_MOD_EXEC" == "nodes" ]; then

        # Display available source nodes #
        for SRM_NOD_INPUT in $SRM_MNT_BASE/pose/*; do

            # Check for directories #
            if [ -e $SRM_NOD_INPUT/info/$SRM_IO_ICLASS ]; then

                # Display source node #
                srm_echo "$(basename $SRM_NOD_INPUT)"

            fi

        done

    elif [ "$SRM_MOD_EXEC" == "iclass" ]; then

        # Display classification #
        srm_echo "$SRM_IO_ICLASS"

    elif [ "$SRM_MOD_EXEC" == "oclass" ]; then

        # Display classification #
        srm_echo "$SRM_IO_OCLASS"

    else

        # Display message #
        srm_echo "SRM - Kernel : Error, invalid module mode"; SRM_SIG_EXIT=1

    fi

    # Exit code #
    exit $SRM_SIG_EXIT

